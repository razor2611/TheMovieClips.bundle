HTTP_HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_4) AppleWebKit/536.30.1 (KHTML, like Gecko) Version/6.0.5 Safari/536.30.1'
}
BASE_URL = 'https://www.themovieclips.com'
API_KEY = Prefs['token']
API_URL = 'https://www.themovieclips.com/api/v1/trailers?token=%s' % API_KEY
TIMEOUT = 100000

####################################################################################################
def Search(query):

    oc = ObjectContainer(title1='TheMovieClips Trailers', title2='Search Results')
    response = JSON.ObjectFromURL(API_URL+"&name="+String.Quote(query), headers=HTTP_HEADERS)

    if response:
            for trailer in response.values():
                url = trailer['link']

                try:
                   oc.add(URLService.MetadataObjectForURL(url))
                except:
                    pass   
    return oc

####################################################################################################
def MetadataObjectForURL(url):

    alias = url.replace(BASE_URL, "")
    response = JSON.ObjectFromURL(BASE_URL+"/api/v1/getalias"+alias+"?token="+API_KEY, headers=HTTP_HEADERS, timeout=TIMEOUT)

  #  video_id = response['id']

  #  trailerurl = "{}{}{}".format(API_URL, "&id=",video_id)
  #  response = JSON.ObjectFromURL(trailerurl, timeout=TIMEOUT)

    title = response['movie']['title'] + ' ' + response['title'] + ' [' + response['movie']['year'] + ']'
    summary = response['movie']['plot']
    duration = None
    genres = []

    #if response['duration']
    if response['duration'] and int(response['duration']) > 0:
        duration = response['duration'] * 1000
    thumb = response['thumb']['small']
 #   if 'year' in response['movie']
    year = int(response['movie']['year'])

    return VideoClipObject(
        title = title,
        summary = summary,
        duration = duration,
        genres = genres,
        year = year,
 #       originally_available_at = release_date,
        thumb = Resource.ContentsOfURLWithFallback(thumb)
    )
    
####################################################################################################
def MediaObjectsForURL(url):
    
#    Log("Starting media object")

    alias = url.replace(BASE_URL, "")
    response = JSON.ObjectFromURL(BASE_URL+"/api/v1/getalias"+alias+"?token="+API_KEY, headers=HTTP_HEADERS)   
    trailer_id = response['id']

    return [
            MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '1080',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [PartObject(key=Callback(PlayVideo, id=trailer_id,  res='1080p'))]
        ),
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '720',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [PartObject(key=Callback(PlayVideo, id=trailer_id,  res='720p'))]
        ),
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '480',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [PartObject(key=Callback(PlayVideo, id=trailer_id, res='480p'))]
        ),
        MediaObject(
            container = Container.MP4,
            video_codec = VideoCodec.H264,
            video_resolution = '360',
            audio_codec = AudioCodec.AAC,
            audio_channels = 2,
            optimized_for_streaming = True,
            parts = [PartObject(key=Callback(PlayVideo, id=trailer_id, res='360p'))]
        )
    ]

####################################################################################################
@indirect
def PlayVideo(id, res):

    url = API_URL + "&id=" + str(id)
    trailer = JSON.ObjectFromURL(url, timeout=TIMEOUT)

    #for trailer in response.values():

    if trailer['embed']['html5']['1080p'] and res == "1080p":
        if Prefs['secure']:
            video_url = trailer['embed']['html5']['1080p']
        else:
            video_url = trailer['embed']['html5']['1080p']
    elif res == "720p":
        if Prefs['secure']:
            video_url = trailer['embed']['html5']['720p']
        else:
            video_url = trailer['embed']['html5']['720p']
    elif res == "480p":
        if Prefs['secure']:
            video_url = trailer['embed']['html5']['480p']
        else:
            video_url = trailer['embed']['html5']['480p']        
    elif res == "360p":
        if Prefs['secure']:
            video_url = trailer['embed']['html5']['360p']
        else:
            video_url = trailer['embed']['html5']['360p']
    else:
        raise Ex.MediaNotAvailable

    return IndirectResponse(VideoClipObject, key=video_url)
